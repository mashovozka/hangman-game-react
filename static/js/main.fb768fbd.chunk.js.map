{"version":3,"sources":["pics/0.jpg","pics/1.jpg","pics/2.jpg","pics/3.jpg","pics/4.jpg","pics/5.jpg","pics/6.jpg","words.js","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","words","randomWord","Math","floor","random","length","Hangman","props","state","img","imgs","nWrong","answer","guessed","Set","console","log","guessedWord","bind","generateButtons","handleGuess","reset","this","setState","split","map","ltr","has","evt","target","value","st","add","includes","key","onClick","disabled","isWinner","join","gameOver","altText","maxWrong","gameState","className","src","alt","id","Component","defaultProps","img0","img1","img2","img3","img4","img5","img6","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb768fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c80394c2.jpg\";","let words = [ \"week\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\", \"weekend\", \"breakfast\", \"dinner\", \"lunch\", \"today\", \"tomorrow\", \"board\", \"chair\", \"window\", \"chair\", \"laptop\", \"dictionary\", \"table\", \"wallet\", \"purse\", \"umbrella\", \"photo\", \"bag\", \"key\", \"watch\", \"tablet\", \"notebook\", \"husband\", \"wife\", \"mother\", \"father\", \"son\", \"daughter\"]\n\nfunction randomWord () {\n    return words[Math.floor(Math.random()* words.length)]\n}\nexport {randomWord}","import React, {Component} from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./pics/0.jpg\";\nimport img1 from \"./pics/1.jpg\";\nimport img2 from \"./pics/2.jpg\";\nimport img3 from \"./pics/3.jpg\";\nimport img4 from \"./pics/4.jpg\";\nimport img5 from \"./pics/5.jpg\";\nimport img6 from \"./pics/6.jpg\";\nimport {randomWord} from \"./words\";\n\nclass Hangman extends Component {\n    static defaultProps = {\n        imgs: [img0, img1, img2, img3, img4, img5, img6],\n        maxWrong: 6\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            img: this.props.imgs[0],\n            nWrong: 0,\n            answer: randomWord(),\n            guessed: new Set(),\n        }\n        console.log(this.state.answer)\n       this.guessedWord = this.guessedWord.bind(this);\n       this.generateButtons = this.generateButtons.bind(this);\n       this.handleGuess = this.handleGuess.bind(this);\n       this.reset = this.reset.bind(this)\n    }\n\n    reset(){\n        this.setState({\n            nWrong: 0,\n            answer: randomWord(),\n            guessed: new Set(),\n            img: this.props.imgs[0],\n        })\n    }\n\n    guessedWord(){\n       return this.state.answer.split(\"\")\n       .map(ltr =>(this.state.guessed.has(ltr) ? ltr : \"_\"))\n    } \n\n\n    handleGuess(evt){\n        let ltr = evt.target.value;\n        this.setState(st => ({\n            guessed: st.guessed.add(ltr),\n            nWrong: st.nWrong + (this.state.answer.includes(ltr) ? 0 : 1)\n        }))\n    }\n\n   generateButtons(){\n       return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => \n        <button \n        value={ltr}\n        key={ltr}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n        >\n        {ltr}\n        </button>\n        )\n   }\n    render(){\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n        const gameOver = this.state.nWrong >= 6;\n        const altText = `${this.state.nWrong}/${this.props.maxWrong} guesses`;\n        let gameState = this.generateButtons();\n        if (isWinner) gameState = \"You Win!\";\n        if (gameOver) gameState = \"You Lose!\";\n        return(\n            <div className=\"Hangman\">\n                <h1>Hangman</h1>\n                <img src={this.props.imgs[this.state.nWrong]} alt={altText}/>\n                <p>Number of Wrong Guesses: {this.state.nWrong}</p>\n                <p className='Hangman-word'>{!gameOver ? this.guessedWord() : this.state.answer }</p>\n                <p className='Hangman-btns'>{gameState}</p>\n                <button id='reset' onClick={this.reset} >Reset</button>\n            </div>\n        )\n    }\n}\nexport default Hangman;","import React, {Component} from 'react';\nimport Hangman from './Hangman.js';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <div className=\"App\">\n        < Hangman />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}